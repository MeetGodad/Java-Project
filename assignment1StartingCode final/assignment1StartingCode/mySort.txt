This is the psuedocode for Heap Sort as our group have used this sorting algorithm as our choice of sorting algorithm.

HeapSort(arr, comparator):
    n = length of arr

    // Build max heap
    for i from n/2 - 1 down to 0:
        Heapify(arr, n, i, comparator)

    // Extract elements from the heap one by one
    for i from n - 1 down to 1:
        // Swap the root (maximum element) with the last element
        swap(arr[0], arr[i])

    // Heapify the root element  to get the highest number first

	function heapify(arr, n, i, comparator)
	largest = i
	left=2*i + 1
	right= 2*i + 2

    // If left child is larger than root
    	if left < n and comparator(arr[left], arr[largest]) < 0

    // If right child is larger than largest so far
    if right < n and comparator(arr[right], arr[largest]) < 0


Reason to choose Heap sort:

Heap sort is not a stable algorithm beacuse it may change the relative order of equal elements. Heap Sort is known for its simplicity and consistent performance, making it suitable for scenarios where a stable sort is not required.
 
Counting analysis: For each element in the second half of the array (from n/2 - 1 to 0), it performs heapify operation. 
		   Let's say k is the number of elements in the second half then the total number of comparisons and
                   swaps during heap construction is 0(k log k).

Time Complexity: The time complexity for Heap sort is 0(n log n) for all the cases.

Space Complexity: The space complexity for Heap Sort is 0(1) and beacuse of this Heap Sort is also called "in-place" sorting algorithm.




